  <?php

/**
 * Implements hook_block_info();
 */
function parallax_cover_block_info() {
  $blocks = array();

  $blocks['header'] = array(
    'info' => t('Parallax Cover'), 
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view();
 * @param $delta 
 *    the name of the requested block
 */
function parallax_cover_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'header':

      // Get last published cover
      $covers = _parallax_cover_get_published_covers();
      if ($covers){
        $cover = array_values($covers)[0];
        $uri = $cover->field_img['und'][0]['uri'];

        if ($uri){
          $block = _parallax_cover_create_block($cover, $uri);
        }
      }

      
      
    break;

  }
  return $block;
}

function _parallax_cover_create_block($node, $uri){
  $id = 'front';

  $url_img = file_create_url($uri);
  $prefix = '<div class="parallax-w" data-bleed="1" data-parallax="scroll" data-image-src="' . $url_img . '">';
  $content['parallax_cover'] = array(
    '#prefix' => $prefix,
    '#suffix' => '</div>',
  );

  $content['parallax_cover']['content'] = array(
    '#prefix' => '<div class="wrapper-over-parallax"><div class="over-parallax">',
    '#suffix' => '</div></div>',
  );

  $p_content = node_view($node,'teaser');

  $content['parallax_cover']['content']['over'] = array(
    '#prefix' => '<div class="parallax-content clearfix">',
    '#suffix' => '</div>',
    'content' => $p_content,
  );

  $block['subject'] = 'Test';
  $block['content'] = array(
    '#theme' => 'parallax-cover',
    '#nid' => $id,
    '#content' => $content,
  );

  $block['content']['#attached']['js'][] = drupal_get_path('module', 'parallax_cover') . '/parallax-cover.js';
  $js_parallax = libraries_get_path('jquery.parallax') . '/jquery.parallax.min.js';
  drupal_add_js( $js_parallax , array('group' => JS_LIBRARY, 'weight' => 1));

  return $block;
}


/**
 * Implementes hook_theme();
 */
function parallax_cover_theme(){
  return array(
    'parallax-cover' => array(
      // use a template and give the template's name.
      'template' => 'parallax-cover',
      'variables' => array(
        'nid' => NULL,
        'content' => NULL,
      ),
      'pattern' => 'parallax-cover__',
    ),
  );
}

/**
 * Gets all nodes related by brand
 */
function _parallax_cover_get_published_covers(){
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', array('cover'))
    ->propertyCondition('status', NODE_PUBLISHED)
    ->propertyOrderBy('created', 'DESC');

  $query->addMetaData('account', user_load(1)); // Run the query as user 1.
  $query->execute();

  if (isset($query->ordered_results)){
    $nodes = $query->ordered_results;
    $nodes_id = array();
    foreach ( $nodes as $node ) {
      array_push ($nodes_id, $node->entity_id );
    }
    $nodes = node_load_multiple($nodes_id);
  } else {
    $nodes = false;
  }
  return $nodes;
}

//$show = TRUE;
//if(arg(2)){
//  if (arg(2) == 'edit' || arg(2) == 'children'){
//    $show = FALSE;
//  }
//}
//if(arg(1)){
//  if (arg(1) == 'add'){
//    $show = FALSE;
//  }
//}
//$block = FALSE;